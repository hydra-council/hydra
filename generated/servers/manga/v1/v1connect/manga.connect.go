// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: servers/manga/v1/manga.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "hydra/generated/servers/manga/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MangaServiceName is the fully-qualified name of the MangaService service.
	MangaServiceName = "manga.v1.MangaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MangaServiceInstallPluginProcedure is the fully-qualified name of the MangaService's
	// InstallPlugin RPC.
	MangaServiceInstallPluginProcedure = "/manga.v1.MangaService/InstallPlugin"
	// MangaServiceDeletePluginProcedure is the fully-qualified name of the MangaService's DeletePlugin
	// RPC.
	MangaServiceDeletePluginProcedure = "/manga.v1.MangaService/DeletePlugin"
	// MangaServiceSearchPluginProcedure is the fully-qualified name of the MangaService's SearchPlugin
	// RPC.
	MangaServiceSearchPluginProcedure = "/manga.v1.MangaService/SearchPlugin"
	// MangaServiceRefreshMangaProcedure is the fully-qualified name of the MangaService's RefreshManga
	// RPC.
	MangaServiceRefreshMangaProcedure = "/manga.v1.MangaService/RefreshManga"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mangaServiceServiceDescriptor             = v1.File_servers_manga_v1_manga_proto.Services().ByName("MangaService")
	mangaServiceInstallPluginMethodDescriptor = mangaServiceServiceDescriptor.Methods().ByName("InstallPlugin")
	mangaServiceDeletePluginMethodDescriptor  = mangaServiceServiceDescriptor.Methods().ByName("DeletePlugin")
	mangaServiceSearchPluginMethodDescriptor  = mangaServiceServiceDescriptor.Methods().ByName("SearchPlugin")
	mangaServiceRefreshMangaMethodDescriptor  = mangaServiceServiceDescriptor.Methods().ByName("RefreshManga")
)

// MangaServiceClient is a client for the manga.v1.MangaService service.
type MangaServiceClient interface {
	// install a new plugin
	InstallPlugin(context.Context, *connect.Request[v1.NewPluginRequest]) (*connect.Response[v1.NewPluginResponse], error)
	// delete plugin
	DeletePlugin(context.Context, *connect.Request[v1.DeletePluginRequest]) (*connect.Response[v1.DeletePluginResponse], error)
	// search plugin
	SearchPlugin(context.Context, *connect.Request[v1.SearchPluginRequest]) (*connect.Response[v1.SearchPluginResponse], error)
	// refresh manga
	RefreshManga(context.Context, *connect.Request[v1.RefreshMangaRequest]) (*connect.Response[v1.RefreshMangaResponse], error)
}

// NewMangaServiceClient constructs a client for the manga.v1.MangaService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMangaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MangaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mangaServiceClient{
		installPlugin: connect.NewClient[v1.NewPluginRequest, v1.NewPluginResponse](
			httpClient,
			baseURL+MangaServiceInstallPluginProcedure,
			connect.WithSchema(mangaServiceInstallPluginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePlugin: connect.NewClient[v1.DeletePluginRequest, v1.DeletePluginResponse](
			httpClient,
			baseURL+MangaServiceDeletePluginProcedure,
			connect.WithSchema(mangaServiceDeletePluginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchPlugin: connect.NewClient[v1.SearchPluginRequest, v1.SearchPluginResponse](
			httpClient,
			baseURL+MangaServiceSearchPluginProcedure,
			connect.WithSchema(mangaServiceSearchPluginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		refreshManga: connect.NewClient[v1.RefreshMangaRequest, v1.RefreshMangaResponse](
			httpClient,
			baseURL+MangaServiceRefreshMangaProcedure,
			connect.WithSchema(mangaServiceRefreshMangaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mangaServiceClient implements MangaServiceClient.
type mangaServiceClient struct {
	installPlugin *connect.Client[v1.NewPluginRequest, v1.NewPluginResponse]
	deletePlugin  *connect.Client[v1.DeletePluginRequest, v1.DeletePluginResponse]
	searchPlugin  *connect.Client[v1.SearchPluginRequest, v1.SearchPluginResponse]
	refreshManga  *connect.Client[v1.RefreshMangaRequest, v1.RefreshMangaResponse]
}

// InstallPlugin calls manga.v1.MangaService.InstallPlugin.
func (c *mangaServiceClient) InstallPlugin(ctx context.Context, req *connect.Request[v1.NewPluginRequest]) (*connect.Response[v1.NewPluginResponse], error) {
	return c.installPlugin.CallUnary(ctx, req)
}

// DeletePlugin calls manga.v1.MangaService.DeletePlugin.
func (c *mangaServiceClient) DeletePlugin(ctx context.Context, req *connect.Request[v1.DeletePluginRequest]) (*connect.Response[v1.DeletePluginResponse], error) {
	return c.deletePlugin.CallUnary(ctx, req)
}

// SearchPlugin calls manga.v1.MangaService.SearchPlugin.
func (c *mangaServiceClient) SearchPlugin(ctx context.Context, req *connect.Request[v1.SearchPluginRequest]) (*connect.Response[v1.SearchPluginResponse], error) {
	return c.searchPlugin.CallUnary(ctx, req)
}

// RefreshManga calls manga.v1.MangaService.RefreshManga.
func (c *mangaServiceClient) RefreshManga(ctx context.Context, req *connect.Request[v1.RefreshMangaRequest]) (*connect.Response[v1.RefreshMangaResponse], error) {
	return c.refreshManga.CallUnary(ctx, req)
}

// MangaServiceHandler is an implementation of the manga.v1.MangaService service.
type MangaServiceHandler interface {
	// install a new plugin
	InstallPlugin(context.Context, *connect.Request[v1.NewPluginRequest]) (*connect.Response[v1.NewPluginResponse], error)
	// delete plugin
	DeletePlugin(context.Context, *connect.Request[v1.DeletePluginRequest]) (*connect.Response[v1.DeletePluginResponse], error)
	// search plugin
	SearchPlugin(context.Context, *connect.Request[v1.SearchPluginRequest]) (*connect.Response[v1.SearchPluginResponse], error)
	// refresh manga
	RefreshManga(context.Context, *connect.Request[v1.RefreshMangaRequest]) (*connect.Response[v1.RefreshMangaResponse], error)
}

// NewMangaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMangaServiceHandler(svc MangaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mangaServiceInstallPluginHandler := connect.NewUnaryHandler(
		MangaServiceInstallPluginProcedure,
		svc.InstallPlugin,
		connect.WithSchema(mangaServiceInstallPluginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mangaServiceDeletePluginHandler := connect.NewUnaryHandler(
		MangaServiceDeletePluginProcedure,
		svc.DeletePlugin,
		connect.WithSchema(mangaServiceDeletePluginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mangaServiceSearchPluginHandler := connect.NewUnaryHandler(
		MangaServiceSearchPluginProcedure,
		svc.SearchPlugin,
		connect.WithSchema(mangaServiceSearchPluginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mangaServiceRefreshMangaHandler := connect.NewUnaryHandler(
		MangaServiceRefreshMangaProcedure,
		svc.RefreshManga,
		connect.WithSchema(mangaServiceRefreshMangaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/manga.v1.MangaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MangaServiceInstallPluginProcedure:
			mangaServiceInstallPluginHandler.ServeHTTP(w, r)
		case MangaServiceDeletePluginProcedure:
			mangaServiceDeletePluginHandler.ServeHTTP(w, r)
		case MangaServiceSearchPluginProcedure:
			mangaServiceSearchPluginHandler.ServeHTTP(w, r)
		case MangaServiceRefreshMangaProcedure:
			mangaServiceRefreshMangaHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMangaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMangaServiceHandler struct{}

func (UnimplementedMangaServiceHandler) InstallPlugin(context.Context, *connect.Request[v1.NewPluginRequest]) (*connect.Response[v1.NewPluginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manga.v1.MangaService.InstallPlugin is not implemented"))
}

func (UnimplementedMangaServiceHandler) DeletePlugin(context.Context, *connect.Request[v1.DeletePluginRequest]) (*connect.Response[v1.DeletePluginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manga.v1.MangaService.DeletePlugin is not implemented"))
}

func (UnimplementedMangaServiceHandler) SearchPlugin(context.Context, *connect.Request[v1.SearchPluginRequest]) (*connect.Response[v1.SearchPluginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manga.v1.MangaService.SearchPlugin is not implemented"))
}

func (UnimplementedMangaServiceHandler) RefreshManga(context.Context, *connect.Request[v1.RefreshMangaRequest]) (*connect.Response[v1.RefreshMangaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manga.v1.MangaService.RefreshManga is not implemented"))
}
