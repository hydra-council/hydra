// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: plugin/v1/plugin.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "hydra/generated/plugin/v1"
	v11 "hydra/generated/types/plugin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PluginServiceName is the fully-qualified name of the PluginService service.
	PluginServiceName = "plugin.v1.PluginService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PluginServiceInstallRepoProcedure is the fully-qualified name of the PluginService's InstallRepo
	// RPC.
	PluginServiceInstallRepoProcedure = "/plugin.v1.PluginService/InstallRepo"
	// PluginServiceUninstallRepoProcedure is the fully-qualified name of the PluginService's
	// UninstallRepo RPC.
	PluginServiceUninstallRepoProcedure = "/plugin.v1.PluginService/UninstallRepo"
	// PluginServiceUpdateRepoProcedure is the fully-qualified name of the PluginService's UpdateRepo
	// RPC.
	PluginServiceUpdateRepoProcedure = "/plugin.v1.PluginService/UpdateRepo"
	// PluginServiceListReposProcedure is the fully-qualified name of the PluginService's ListRepos RPC.
	PluginServiceListReposProcedure = "/plugin.v1.PluginService/ListRepos"
	// PluginServiceInstallExtensionProcedure is the fully-qualified name of the PluginService's
	// InstallExtension RPC.
	PluginServiceInstallExtensionProcedure = "/plugin.v1.PluginService/InstallExtension"
	// PluginServiceUninstallExtensionProcedure is the fully-qualified name of the PluginService's
	// UninstallExtension RPC.
	PluginServiceUninstallExtensionProcedure = "/plugin.v1.PluginService/UninstallExtension"
	// PluginServiceUpdateExtensionProcedure is the fully-qualified name of the PluginService's
	// UpdateExtension RPC.
	PluginServiceUpdateExtensionProcedure = "/plugin.v1.PluginService/UpdateExtension"
	// PluginServiceListExtensionsProcedure is the fully-qualified name of the PluginService's
	// ListExtensions RPC.
	PluginServiceListExtensionsProcedure = "/plugin.v1.PluginService/ListExtensions"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pluginServiceServiceDescriptor                  = v1.File_plugin_v1_plugin_proto.Services().ByName("PluginService")
	pluginServiceInstallRepoMethodDescriptor        = pluginServiceServiceDescriptor.Methods().ByName("InstallRepo")
	pluginServiceUninstallRepoMethodDescriptor      = pluginServiceServiceDescriptor.Methods().ByName("UninstallRepo")
	pluginServiceUpdateRepoMethodDescriptor         = pluginServiceServiceDescriptor.Methods().ByName("UpdateRepo")
	pluginServiceListReposMethodDescriptor          = pluginServiceServiceDescriptor.Methods().ByName("ListRepos")
	pluginServiceInstallExtensionMethodDescriptor   = pluginServiceServiceDescriptor.Methods().ByName("InstallExtension")
	pluginServiceUninstallExtensionMethodDescriptor = pluginServiceServiceDescriptor.Methods().ByName("UninstallExtension")
	pluginServiceUpdateExtensionMethodDescriptor    = pluginServiceServiceDescriptor.Methods().ByName("UpdateExtension")
	pluginServiceListExtensionsMethodDescriptor     = pluginServiceServiceDescriptor.Methods().ByName("ListExtensions")
)

// PluginServiceClient is a client for the plugin.v1.PluginService service.
type PluginServiceClient interface {
	// //////////////////////////////////////////////////////////////////////////////////////
	// repo management
	InstallRepo(context.Context, *connect.Request[v11.InstallRepoRequest]) (*connect.Response[v11.InstallRepoResponse], error)
	UninstallRepo(context.Context, *connect.Request[v11.RepoRequest]) (*connect.Response[v11.RepoResponse], error)
	UpdateRepo(context.Context, *connect.Request[v11.RepoRequest]) (*connect.Response[v11.RepoResponse], error)
	ListRepos(context.Context, *connect.Request[v11.ListRepoRequest]) (*connect.Response[v11.ListRepoResponse], error)
	// //////////////////////////////////////////////////////////////////////////////////////
	// extension management
	InstallExtension(context.Context, *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error)
	UninstallExtension(context.Context, *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error)
	UpdateExtension(context.Context, *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error)
	ListExtensions(context.Context, *connect.Request[v11.ListExtensionRequest]) (*connect.Response[v11.ListExtensionResponse], error)
}

// NewPluginServiceClient constructs a client for the plugin.v1.PluginService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPluginServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PluginServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pluginServiceClient{
		installRepo: connect.NewClient[v11.InstallRepoRequest, v11.InstallRepoResponse](
			httpClient,
			baseURL+PluginServiceInstallRepoProcedure,
			connect.WithSchema(pluginServiceInstallRepoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uninstallRepo: connect.NewClient[v11.RepoRequest, v11.RepoResponse](
			httpClient,
			baseURL+PluginServiceUninstallRepoProcedure,
			connect.WithSchema(pluginServiceUninstallRepoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRepo: connect.NewClient[v11.RepoRequest, v11.RepoResponse](
			httpClient,
			baseURL+PluginServiceUpdateRepoProcedure,
			connect.WithSchema(pluginServiceUpdateRepoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRepos: connect.NewClient[v11.ListRepoRequest, v11.ListRepoResponse](
			httpClient,
			baseURL+PluginServiceListReposProcedure,
			connect.WithSchema(pluginServiceListReposMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		installExtension: connect.NewClient[v11.ExtensionRequest, v11.ExtensionResponse](
			httpClient,
			baseURL+PluginServiceInstallExtensionProcedure,
			connect.WithSchema(pluginServiceInstallExtensionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uninstallExtension: connect.NewClient[v11.ExtensionRequest, v11.ExtensionResponse](
			httpClient,
			baseURL+PluginServiceUninstallExtensionProcedure,
			connect.WithSchema(pluginServiceUninstallExtensionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateExtension: connect.NewClient[v11.ExtensionRequest, v11.ExtensionResponse](
			httpClient,
			baseURL+PluginServiceUpdateExtensionProcedure,
			connect.WithSchema(pluginServiceUpdateExtensionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listExtensions: connect.NewClient[v11.ListExtensionRequest, v11.ListExtensionResponse](
			httpClient,
			baseURL+PluginServiceListExtensionsProcedure,
			connect.WithSchema(pluginServiceListExtensionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pluginServiceClient implements PluginServiceClient.
type pluginServiceClient struct {
	installRepo        *connect.Client[v11.InstallRepoRequest, v11.InstallRepoResponse]
	uninstallRepo      *connect.Client[v11.RepoRequest, v11.RepoResponse]
	updateRepo         *connect.Client[v11.RepoRequest, v11.RepoResponse]
	listRepos          *connect.Client[v11.ListRepoRequest, v11.ListRepoResponse]
	installExtension   *connect.Client[v11.ExtensionRequest, v11.ExtensionResponse]
	uninstallExtension *connect.Client[v11.ExtensionRequest, v11.ExtensionResponse]
	updateExtension    *connect.Client[v11.ExtensionRequest, v11.ExtensionResponse]
	listExtensions     *connect.Client[v11.ListExtensionRequest, v11.ListExtensionResponse]
}

// InstallRepo calls plugin.v1.PluginService.InstallRepo.
func (c *pluginServiceClient) InstallRepo(ctx context.Context, req *connect.Request[v11.InstallRepoRequest]) (*connect.Response[v11.InstallRepoResponse], error) {
	return c.installRepo.CallUnary(ctx, req)
}

// UninstallRepo calls plugin.v1.PluginService.UninstallRepo.
func (c *pluginServiceClient) UninstallRepo(ctx context.Context, req *connect.Request[v11.RepoRequest]) (*connect.Response[v11.RepoResponse], error) {
	return c.uninstallRepo.CallUnary(ctx, req)
}

// UpdateRepo calls plugin.v1.PluginService.UpdateRepo.
func (c *pluginServiceClient) UpdateRepo(ctx context.Context, req *connect.Request[v11.RepoRequest]) (*connect.Response[v11.RepoResponse], error) {
	return c.updateRepo.CallUnary(ctx, req)
}

// ListRepos calls plugin.v1.PluginService.ListRepos.
func (c *pluginServiceClient) ListRepos(ctx context.Context, req *connect.Request[v11.ListRepoRequest]) (*connect.Response[v11.ListRepoResponse], error) {
	return c.listRepos.CallUnary(ctx, req)
}

// InstallExtension calls plugin.v1.PluginService.InstallExtension.
func (c *pluginServiceClient) InstallExtension(ctx context.Context, req *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error) {
	return c.installExtension.CallUnary(ctx, req)
}

// UninstallExtension calls plugin.v1.PluginService.UninstallExtension.
func (c *pluginServiceClient) UninstallExtension(ctx context.Context, req *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error) {
	return c.uninstallExtension.CallUnary(ctx, req)
}

// UpdateExtension calls plugin.v1.PluginService.UpdateExtension.
func (c *pluginServiceClient) UpdateExtension(ctx context.Context, req *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error) {
	return c.updateExtension.CallUnary(ctx, req)
}

// ListExtensions calls plugin.v1.PluginService.ListExtensions.
func (c *pluginServiceClient) ListExtensions(ctx context.Context, req *connect.Request[v11.ListExtensionRequest]) (*connect.Response[v11.ListExtensionResponse], error) {
	return c.listExtensions.CallUnary(ctx, req)
}

// PluginServiceHandler is an implementation of the plugin.v1.PluginService service.
type PluginServiceHandler interface {
	// //////////////////////////////////////////////////////////////////////////////////////
	// repo management
	InstallRepo(context.Context, *connect.Request[v11.InstallRepoRequest]) (*connect.Response[v11.InstallRepoResponse], error)
	UninstallRepo(context.Context, *connect.Request[v11.RepoRequest]) (*connect.Response[v11.RepoResponse], error)
	UpdateRepo(context.Context, *connect.Request[v11.RepoRequest]) (*connect.Response[v11.RepoResponse], error)
	ListRepos(context.Context, *connect.Request[v11.ListRepoRequest]) (*connect.Response[v11.ListRepoResponse], error)
	// //////////////////////////////////////////////////////////////////////////////////////
	// extension management
	InstallExtension(context.Context, *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error)
	UninstallExtension(context.Context, *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error)
	UpdateExtension(context.Context, *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error)
	ListExtensions(context.Context, *connect.Request[v11.ListExtensionRequest]) (*connect.Response[v11.ListExtensionResponse], error)
}

// NewPluginServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPluginServiceHandler(svc PluginServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pluginServiceInstallRepoHandler := connect.NewUnaryHandler(
		PluginServiceInstallRepoProcedure,
		svc.InstallRepo,
		connect.WithSchema(pluginServiceInstallRepoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pluginServiceUninstallRepoHandler := connect.NewUnaryHandler(
		PluginServiceUninstallRepoProcedure,
		svc.UninstallRepo,
		connect.WithSchema(pluginServiceUninstallRepoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pluginServiceUpdateRepoHandler := connect.NewUnaryHandler(
		PluginServiceUpdateRepoProcedure,
		svc.UpdateRepo,
		connect.WithSchema(pluginServiceUpdateRepoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pluginServiceListReposHandler := connect.NewUnaryHandler(
		PluginServiceListReposProcedure,
		svc.ListRepos,
		connect.WithSchema(pluginServiceListReposMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pluginServiceInstallExtensionHandler := connect.NewUnaryHandler(
		PluginServiceInstallExtensionProcedure,
		svc.InstallExtension,
		connect.WithSchema(pluginServiceInstallExtensionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pluginServiceUninstallExtensionHandler := connect.NewUnaryHandler(
		PluginServiceUninstallExtensionProcedure,
		svc.UninstallExtension,
		connect.WithSchema(pluginServiceUninstallExtensionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pluginServiceUpdateExtensionHandler := connect.NewUnaryHandler(
		PluginServiceUpdateExtensionProcedure,
		svc.UpdateExtension,
		connect.WithSchema(pluginServiceUpdateExtensionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pluginServiceListExtensionsHandler := connect.NewUnaryHandler(
		PluginServiceListExtensionsProcedure,
		svc.ListExtensions,
		connect.WithSchema(pluginServiceListExtensionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/plugin.v1.PluginService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PluginServiceInstallRepoProcedure:
			pluginServiceInstallRepoHandler.ServeHTTP(w, r)
		case PluginServiceUninstallRepoProcedure:
			pluginServiceUninstallRepoHandler.ServeHTTP(w, r)
		case PluginServiceUpdateRepoProcedure:
			pluginServiceUpdateRepoHandler.ServeHTTP(w, r)
		case PluginServiceListReposProcedure:
			pluginServiceListReposHandler.ServeHTTP(w, r)
		case PluginServiceInstallExtensionProcedure:
			pluginServiceInstallExtensionHandler.ServeHTTP(w, r)
		case PluginServiceUninstallExtensionProcedure:
			pluginServiceUninstallExtensionHandler.ServeHTTP(w, r)
		case PluginServiceUpdateExtensionProcedure:
			pluginServiceUpdateExtensionHandler.ServeHTTP(w, r)
		case PluginServiceListExtensionsProcedure:
			pluginServiceListExtensionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPluginServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPluginServiceHandler struct{}

func (UnimplementedPluginServiceHandler) InstallRepo(context.Context, *connect.Request[v11.InstallRepoRequest]) (*connect.Response[v11.InstallRepoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plugin.v1.PluginService.InstallRepo is not implemented"))
}

func (UnimplementedPluginServiceHandler) UninstallRepo(context.Context, *connect.Request[v11.RepoRequest]) (*connect.Response[v11.RepoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plugin.v1.PluginService.UninstallRepo is not implemented"))
}

func (UnimplementedPluginServiceHandler) UpdateRepo(context.Context, *connect.Request[v11.RepoRequest]) (*connect.Response[v11.RepoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plugin.v1.PluginService.UpdateRepo is not implemented"))
}

func (UnimplementedPluginServiceHandler) ListRepos(context.Context, *connect.Request[v11.ListRepoRequest]) (*connect.Response[v11.ListRepoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plugin.v1.PluginService.ListRepos is not implemented"))
}

func (UnimplementedPluginServiceHandler) InstallExtension(context.Context, *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plugin.v1.PluginService.InstallExtension is not implemented"))
}

func (UnimplementedPluginServiceHandler) UninstallExtension(context.Context, *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plugin.v1.PluginService.UninstallExtension is not implemented"))
}

func (UnimplementedPluginServiceHandler) UpdateExtension(context.Context, *connect.Request[v11.ExtensionRequest]) (*connect.Response[v11.ExtensionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plugin.v1.PluginService.UpdateExtension is not implemented"))
}

func (UnimplementedPluginServiceHandler) ListExtensions(context.Context, *connect.Request[v11.ListExtensionRequest]) (*connect.Response[v11.ListExtensionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plugin.v1.PluginService.ListExtensions is not implemented"))
}
