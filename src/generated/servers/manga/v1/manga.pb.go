// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: servers/manga/v1/manga.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Repo stuff
type InstallRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoJsonUrl string `protobuf:"bytes,1,opt,name=repoJsonUrl,proto3" json:"repoJsonUrl,omitempty"`
}

func (x *InstallRepoRequest) Reset() {
	*x = InstallRepoRequest{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallRepoRequest) ProtoMessage() {}

func (x *InstallRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallRepoRequest.ProtoReflect.Descriptor instead.
func (*InstallRepoRequest) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{0}
}

func (x *InstallRepoRequest) GetRepoJsonUrl() string {
	if x != nil {
		return x.RepoJsonUrl
	}
	return ""
}

type InstallRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *InstallRepoResponse) Reset() {
	*x = InstallRepoResponse{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallRepoResponse) ProtoMessage() {}

func (x *InstallRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallRepoResponse.ProtoReflect.Descriptor instead.
func (*InstallRepoResponse) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{1}
}

func (x *InstallRepoResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RepoRequest) Reset() {
	*x = RepoRequest{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoRequest) ProtoMessage() {}

func (x *RepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoRequest.ProtoReflect.Descriptor instead.
func (*RepoRequest) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{2}
}

func (x *RepoRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RepoResponse) Reset() {
	*x = RepoResponse{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoResponse) ProtoMessage() {}

func (x *RepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoResponse.ProtoReflect.Descriptor instead.
func (*RepoResponse) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{3}
}

func (x *RepoResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRepoRequest) Reset() {
	*x = ListRepoRequest{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepoRequest) ProtoMessage() {}

func (x *ListRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepoRequest.ProtoReflect.Descriptor instead.
func (*ListRepoRequest) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{4}
}

type ListRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repos []*ExtensionRepo `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *ListRepoResponse) Reset() {
	*x = ListRepoResponse{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepoResponse) ProtoMessage() {}

func (x *ListRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepoResponse.ProtoReflect.Descriptor instead.
func (*ListRepoResponse) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{5}
}

func (x *ListRepoResponse) GetRepos() []*ExtensionRepo {
	if x != nil {
		return x.Repos
	}
	return nil
}

type ExtensionRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RepoName        string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	RepoUrl         string `protobuf:"bytes,3,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	JsonRepoUrl     string `protobuf:"bytes,4,opt,name=jsonRepoUrl,proto3" json:"jsonRepoUrl,omitempty"`
	Version         string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	ManifestVersion int64  `protobuf:"varint,6,opt,name=manifest_version,json=manifestVersion,proto3" json:"manifest_version,omitempty"`
}

func (x *ExtensionRepo) Reset() {
	*x = ExtensionRepo{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtensionRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionRepo) ProtoMessage() {}

func (x *ExtensionRepo) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionRepo.ProtoReflect.Descriptor instead.
func (*ExtensionRepo) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{6}
}

func (x *ExtensionRepo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExtensionRepo) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ExtensionRepo) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ExtensionRepo) GetJsonRepoUrl() string {
	if x != nil {
		return x.JsonRepoUrl
	}
	return ""
}

func (x *ExtensionRepo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ExtensionRepo) GetManifestVersion() int64 {
	if x != nil {
		return x.ManifestVersion
	}
	return 0
}

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Extension stuff
type ExtensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExtensionRequest) Reset() {
	*x = ExtensionRequest{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionRequest) ProtoMessage() {}

func (x *ExtensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionRequest.ProtoReflect.Descriptor instead.
func (*ExtensionRequest) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{7}
}

func (x *ExtensionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ExtensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ExtensionResponse) Reset() {
	*x = ExtensionResponse{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionResponse) ProtoMessage() {}

func (x *ExtensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionResponse.ProtoReflect.Descriptor instead.
func (*ExtensionResponse) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{8}
}

func (x *ExtensionResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListExtensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListExtensionRequest) Reset() {
	*x = ListExtensionRequest{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExtensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExtensionRequest) ProtoMessage() {}

func (x *ListExtensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExtensionRequest.ProtoReflect.Descriptor instead.
func (*ListExtensionRequest) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{9}
}

type ListExtensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extensions []*Extension `protobuf:"bytes,1,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *ListExtensionResponse) Reset() {
	*x = ListExtensionResponse{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExtensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExtensionResponse) ProtoMessage() {}

func (x *ListExtensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExtensionResponse.ProtoReflect.Descriptor instead.
func (*ListExtensionResponse) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{10}
}

func (x *ListExtensionResponse) GetExtensions() []*Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExtensionName   string `protobuf:"bytes,2,opt,name=extensionName,proto3" json:"extensionName,omitempty"`
	ManifestVersion int64  `protobuf:"varint,3,opt,name=manifest_version,json=manifestVersion,proto3" json:"manifest_version,omitempty"`
	Version         string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	MediaType       string `protobuf:"bytes,5,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	RepoUrl         string `protobuf:"bytes,6,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	ScriptUrl       string `protobuf:"bytes,7,opt,name=scriptUrl,proto3" json:"scriptUrl,omitempty"`
	MetaDataUrl     string `protobuf:"bytes,8,opt,name=metaDataUrl,proto3" json:"metaDataUrl,omitempty"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{11}
}

func (x *Extension) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Extension) GetExtensionName() string {
	if x != nil {
		return x.ExtensionName
	}
	return ""
}

func (x *Extension) GetManifestVersion() int64 {
	if x != nil {
		return x.ManifestVersion
	}
	return 0
}

func (x *Extension) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Extension) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Extension) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *Extension) GetScriptUrl() string {
	if x != nil {
		return x.ScriptUrl
	}
	return ""
}

func (x *Extension) GetMetaDataUrl() string {
	if x != nil {
		return x.MetaDataUrl
	}
	return ""
}

type SearchPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchQuery string `protobuf:"bytes,1,opt,name=searchQuery,proto3" json:"searchQuery,omitempty"`
	PluginID    string `protobuf:"bytes,2,opt,name=pluginID,proto3" json:"pluginID,omitempty"`
}

func (x *SearchPluginRequest) Reset() {
	*x = SearchPluginRequest{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPluginRequest) ProtoMessage() {}

func (x *SearchPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPluginRequest.ProtoReflect.Descriptor instead.
func (*SearchPluginRequest) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{12}
}

func (x *SearchPluginRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *SearchPluginRequest) GetPluginID() string {
	if x != nil {
		return x.PluginID
	}
	return ""
}

type SearchPluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *SearchPluginResponse) Reset() {
	*x = SearchPluginResponse{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPluginResponse) ProtoMessage() {}

func (x *SearchPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPluginResponse.ProtoReflect.Descriptor instead.
func (*SearchPluginResponse) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{13}
}

func (x *SearchPluginResponse) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type RefreshMangaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshMangaResponse) Reset() {
	*x = RefreshMangaResponse{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshMangaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshMangaResponse) ProtoMessage() {}

func (x *RefreshMangaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshMangaResponse.ProtoReflect.Descriptor instead.
func (*RefreshMangaResponse) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{14}
}

type RefreshMangaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshMangaRequest) Reset() {
	*x = RefreshMangaRequest{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshMangaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshMangaRequest) ProtoMessage() {}

func (x *RefreshMangaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshMangaRequest.ProtoReflect.Descriptor instead.
func (*RefreshMangaRequest) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{15}
}

// todo add more metadata fields
type MangaMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// each name should be separated by a space
	AlternateTile string          `protobuf:"bytes,2,opt,name=alternateTile,proto3" json:"alternateTile,omitempty"`
	Chapters      []*MangaChapter `protobuf:"bytes,4,rep,name=chapters,proto3" json:"chapters,omitempty"`
}

func (x *MangaMetaData) Reset() {
	*x = MangaMetaData{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MangaMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MangaMetaData) ProtoMessage() {}

func (x *MangaMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MangaMetaData.ProtoReflect.Descriptor instead.
func (*MangaMetaData) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{16}
}

func (x *MangaMetaData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MangaMetaData) GetAlternateTile() string {
	if x != nil {
		return x.AlternateTile
	}
	return ""
}

func (x *MangaMetaData) GetChapters() []*MangaChapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

type MangaChapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChapterNumber        string       `protobuf:"bytes,1,opt,name=chapterNumber,proto3" json:"chapterNumber,omitempty"`
	ChapterName          string       `protobuf:"bytes,2,opt,name=chapterName,proto3" json:"chapterName,omitempty"`
	ReleaseDateInISO6801 string       `protobuf:"bytes,3,opt,name=releaseDateInISO6801,proto3" json:"releaseDateInISO6801,omitempty"`
	Pages                []*MangaPage `protobuf:"bytes,4,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (x *MangaChapter) Reset() {
	*x = MangaChapter{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MangaChapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MangaChapter) ProtoMessage() {}

func (x *MangaChapter) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MangaChapter.ProtoReflect.Descriptor instead.
func (*MangaChapter) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{17}
}

func (x *MangaChapter) GetChapterNumber() string {
	if x != nil {
		return x.ChapterNumber
	}
	return ""
}

func (x *MangaChapter) GetChapterName() string {
	if x != nil {
		return x.ChapterName
	}
	return ""
}

func (x *MangaChapter) GetReleaseDateInISO6801() string {
	if x != nil {
		return x.ReleaseDateInISO6801
	}
	return ""
}

func (x *MangaChapter) GetPages() []*MangaPage {
	if x != nil {
		return x.Pages
	}
	return nil
}

type MangaPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *MangaPage) Reset() {
	*x = MangaPage{}
	mi := &file_servers_manga_v1_manga_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MangaPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MangaPage) ProtoMessage() {}

func (x *MangaPage) ProtoReflect() protoreflect.Message {
	mi := &file_servers_manga_v1_manga_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MangaPage.ProtoReflect.Descriptor instead.
func (*MangaPage) Descriptor() ([]byte, []int) {
	return file_servers_manga_v1_manga_proto_rawDescGZIP(), []int{18}
}

func (x *MangaPage) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MangaPage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_servers_manga_v1_manga_proto protoreflect.FileDescriptor

var file_servers_manga_v1_manga_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x22, 0x36, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x22, 0x2d, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x1d, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26,
	0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0xbc, 0x01, 0x0a,
	0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x10, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2b, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x16, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x55, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x55, 0x72, 0x6c, 0x22, 0x53, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x2a, 0x0a, 0x14, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x4d, 0x61, 0x6e, 0x67, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a,
	0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x7f, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x6e, 0x67, 0x61, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x49,
	0x53, 0x4f, 0x36, 0x38, 0x30, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x49, 0x53, 0x4f, 0x36, 0x38,
	0x30, 0x31, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e,
	0x67, 0x61, 0x50, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0x31, 0x0a,
	0x09, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x32, 0x88, 0x06, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e,
	0x67, 0x61, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0d, 0x55, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x6e, 0x67,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12,
	0x19, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x6e,
	0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x6d,
	0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x55, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e,
	0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x6e, 0x67,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x6d, 0x61,
	0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x7d, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x4d, 0x61, 0x6e,
	0x67, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x20, 0x68, 0x79, 0x64, 0x72, 0x61,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x58,
	0x58, 0xaa, 0x02, 0x08, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x4d,
	0x61, 0x6e, 0x67, 0x61, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x09, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_servers_manga_v1_manga_proto_rawDescOnce sync.Once
	file_servers_manga_v1_manga_proto_rawDescData = file_servers_manga_v1_manga_proto_rawDesc
)

func file_servers_manga_v1_manga_proto_rawDescGZIP() []byte {
	file_servers_manga_v1_manga_proto_rawDescOnce.Do(func() {
		file_servers_manga_v1_manga_proto_rawDescData = protoimpl.X.CompressGZIP(file_servers_manga_v1_manga_proto_rawDescData)
	})
	return file_servers_manga_v1_manga_proto_rawDescData
}

var file_servers_manga_v1_manga_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_servers_manga_v1_manga_proto_goTypes = []any{
	(*InstallRepoRequest)(nil),    // 0: manga.v1.InstallRepoRequest
	(*InstallRepoResponse)(nil),   // 1: manga.v1.InstallRepoResponse
	(*RepoRequest)(nil),           // 2: manga.v1.RepoRequest
	(*RepoResponse)(nil),          // 3: manga.v1.RepoResponse
	(*ListRepoRequest)(nil),       // 4: manga.v1.ListRepoRequest
	(*ListRepoResponse)(nil),      // 5: manga.v1.ListRepoResponse
	(*ExtensionRepo)(nil),         // 6: manga.v1.ExtensionRepo
	(*ExtensionRequest)(nil),      // 7: manga.v1.ExtensionRequest
	(*ExtensionResponse)(nil),     // 8: manga.v1.ExtensionResponse
	(*ListExtensionRequest)(nil),  // 9: manga.v1.ListExtensionRequest
	(*ListExtensionResponse)(nil), // 10: manga.v1.ListExtensionResponse
	(*Extension)(nil),             // 11: manga.v1.Extension
	(*SearchPluginRequest)(nil),   // 12: manga.v1.SearchPluginRequest
	(*SearchPluginResponse)(nil),  // 13: manga.v1.SearchPluginResponse
	(*RefreshMangaResponse)(nil),  // 14: manga.v1.RefreshMangaResponse
	(*RefreshMangaRequest)(nil),   // 15: manga.v1.RefreshMangaRequest
	(*MangaMetaData)(nil),         // 16: manga.v1.MangaMetaData
	(*MangaChapter)(nil),          // 17: manga.v1.MangaChapter
	(*MangaPage)(nil),             // 18: manga.v1.MangaPage
}
var file_servers_manga_v1_manga_proto_depIdxs = []int32{
	6,  // 0: manga.v1.ListRepoResponse.repos:type_name -> manga.v1.ExtensionRepo
	11, // 1: manga.v1.ListExtensionResponse.extensions:type_name -> manga.v1.Extension
	17, // 2: manga.v1.MangaMetaData.chapters:type_name -> manga.v1.MangaChapter
	18, // 3: manga.v1.MangaChapter.pages:type_name -> manga.v1.MangaPage
	12, // 4: manga.v1.MangaService.SearchPlugin:input_type -> manga.v1.SearchPluginRequest
	15, // 5: manga.v1.MangaService.RefreshManga:input_type -> manga.v1.RefreshMangaRequest
	0,  // 6: manga.v1.MangaService.InstallRepo:input_type -> manga.v1.InstallRepoRequest
	2,  // 7: manga.v1.MangaService.UnInstallRepo:input_type -> manga.v1.RepoRequest
	2,  // 8: manga.v1.MangaService.UpdateRepo:input_type -> manga.v1.RepoRequest
	4,  // 9: manga.v1.MangaService.ListRepos:input_type -> manga.v1.ListRepoRequest
	7,  // 10: manga.v1.MangaService.InstallExtension:input_type -> manga.v1.ExtensionRequest
	7,  // 11: manga.v1.MangaService.UnInstallExtension:input_type -> manga.v1.ExtensionRequest
	7,  // 12: manga.v1.MangaService.UpdateExtension:input_type -> manga.v1.ExtensionRequest
	9,  // 13: manga.v1.MangaService.ListExtensions:input_type -> manga.v1.ListExtensionRequest
	13, // 14: manga.v1.MangaService.SearchPlugin:output_type -> manga.v1.SearchPluginResponse
	14, // 15: manga.v1.MangaService.RefreshManga:output_type -> manga.v1.RefreshMangaResponse
	1,  // 16: manga.v1.MangaService.InstallRepo:output_type -> manga.v1.InstallRepoResponse
	3,  // 17: manga.v1.MangaService.UnInstallRepo:output_type -> manga.v1.RepoResponse
	3,  // 18: manga.v1.MangaService.UpdateRepo:output_type -> manga.v1.RepoResponse
	5,  // 19: manga.v1.MangaService.ListRepos:output_type -> manga.v1.ListRepoResponse
	8,  // 20: manga.v1.MangaService.InstallExtension:output_type -> manga.v1.ExtensionResponse
	8,  // 21: manga.v1.MangaService.UnInstallExtension:output_type -> manga.v1.ExtensionResponse
	8,  // 22: manga.v1.MangaService.UpdateExtension:output_type -> manga.v1.ExtensionResponse
	10, // 23: manga.v1.MangaService.ListExtensions:output_type -> manga.v1.ListExtensionResponse
	14, // [14:24] is the sub-list for method output_type
	4,  // [4:14] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_servers_manga_v1_manga_proto_init() }
func file_servers_manga_v1_manga_proto_init() {
	if File_servers_manga_v1_manga_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_servers_manga_v1_manga_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_servers_manga_v1_manga_proto_goTypes,
		DependencyIndexes: file_servers_manga_v1_manga_proto_depIdxs,
		MessageInfos:      file_servers_manga_v1_manga_proto_msgTypes,
	}.Build()
	File_servers_manga_v1_manga_proto = out.File
	file_servers_manga_v1_manga_proto_rawDesc = nil
	file_servers_manga_v1_manga_proto_goTypes = nil
	file_servers_manga_v1_manga_proto_depIdxs = nil
}
