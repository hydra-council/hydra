// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file types/manga/v1/manga_types.proto (package manga_types.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message manga_types.v1.SearchPluginRequest
 */
export class SearchPluginRequest extends Message<SearchPluginRequest> {
  /**
   * @generated from field: string searchQuery = 1;
   */
  searchQuery = "";

  /**
   * @generated from field: string pluginID = 2;
   */
  pluginID = "";

  constructor(data?: PartialMessage<SearchPluginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga_types.v1.SearchPluginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "searchQuery", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pluginID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchPluginRequest {
    return new SearchPluginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchPluginRequest {
    return new SearchPluginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchPluginRequest {
    return new SearchPluginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchPluginRequest | PlainMessage<SearchPluginRequest> | undefined, b: SearchPluginRequest | PlainMessage<SearchPluginRequest> | undefined): boolean {
    return proto3.util.equals(SearchPluginRequest, a, b);
  }
}

/**
 * @generated from message manga_types.v1.SearchPluginResponse
 */
export class SearchPluginResponse extends Message<SearchPluginResponse> {
  /**
   * @generated from field: string pong = 1;
   */
  pong = "";

  constructor(data?: PartialMessage<SearchPluginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga_types.v1.SearchPluginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pong", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchPluginResponse {
    return new SearchPluginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchPluginResponse {
    return new SearchPluginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchPluginResponse {
    return new SearchPluginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchPluginResponse | PlainMessage<SearchPluginResponse> | undefined, b: SearchPluginResponse | PlainMessage<SearchPluginResponse> | undefined): boolean {
    return proto3.util.equals(SearchPluginResponse, a, b);
  }
}

/**
 * @generated from message manga_types.v1.RefreshMangaResponse
 */
export class RefreshMangaResponse extends Message<RefreshMangaResponse> {
  constructor(data?: PartialMessage<RefreshMangaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga_types.v1.RefreshMangaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshMangaResponse {
    return new RefreshMangaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshMangaResponse {
    return new RefreshMangaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshMangaResponse {
    return new RefreshMangaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshMangaResponse | PlainMessage<RefreshMangaResponse> | undefined, b: RefreshMangaResponse | PlainMessage<RefreshMangaResponse> | undefined): boolean {
    return proto3.util.equals(RefreshMangaResponse, a, b);
  }
}

/**
 * @generated from message manga_types.v1.RefreshMangaRequest
 */
export class RefreshMangaRequest extends Message<RefreshMangaRequest> {
  constructor(data?: PartialMessage<RefreshMangaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga_types.v1.RefreshMangaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshMangaRequest {
    return new RefreshMangaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshMangaRequest {
    return new RefreshMangaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshMangaRequest {
    return new RefreshMangaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshMangaRequest | PlainMessage<RefreshMangaRequest> | undefined, b: RefreshMangaRequest | PlainMessage<RefreshMangaRequest> | undefined): boolean {
    return proto3.util.equals(RefreshMangaRequest, a, b);
  }
}

/**
 * todo add more metadata fields
 *
 * @generated from message manga_types.v1.MangaMetaData
 */
export class MangaMetaData extends Message<MangaMetaData> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * each name should be separated by a space
   *
   * @generated from field: string alternateTile = 2;
   */
  alternateTile = "";

  /**
   * @generated from field: repeated manga_types.v1.MangaChapter chapters = 4;
   */
  chapters: MangaChapter[] = [];

  constructor(data?: PartialMessage<MangaMetaData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga_types.v1.MangaMetaData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alternateTile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "chapters", kind: "message", T: MangaChapter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MangaMetaData {
    return new MangaMetaData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MangaMetaData {
    return new MangaMetaData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MangaMetaData {
    return new MangaMetaData().fromJsonString(jsonString, options);
  }

  static equals(a: MangaMetaData | PlainMessage<MangaMetaData> | undefined, b: MangaMetaData | PlainMessage<MangaMetaData> | undefined): boolean {
    return proto3.util.equals(MangaMetaData, a, b);
  }
}

/**
 * @generated from message manga_types.v1.MangaChapter
 */
export class MangaChapter extends Message<MangaChapter> {
  /**
   * @generated from field: string chapterNumber = 1;
   */
  chapterNumber = "";

  /**
   * @generated from field: string chapterName = 2;
   */
  chapterName = "";

  /**
   * @generated from field: string releaseDateInISO6801 = 3;
   */
  releaseDateInISO6801 = "";

  /**
   * @generated from field: repeated manga_types.v1.MangaPage pages = 4;
   */
  pages: MangaPage[] = [];

  constructor(data?: PartialMessage<MangaChapter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga_types.v1.MangaChapter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chapterNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chapterName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "releaseDateInISO6801", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pages", kind: "message", T: MangaPage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MangaChapter {
    return new MangaChapter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MangaChapter {
    return new MangaChapter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MangaChapter {
    return new MangaChapter().fromJsonString(jsonString, options);
  }

  static equals(a: MangaChapter | PlainMessage<MangaChapter> | undefined, b: MangaChapter | PlainMessage<MangaChapter> | undefined): boolean {
    return proto3.util.equals(MangaChapter, a, b);
  }
}

/**
 * @generated from message manga_types.v1.MangaPage
 */
export class MangaPage extends Message<MangaPage> {
  /**
   * @generated from field: int64 page = 1;
   */
  page = protoInt64.zero;

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<MangaPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga_types.v1.MangaPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MangaPage {
    return new MangaPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MangaPage {
    return new MangaPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MangaPage {
    return new MangaPage().fromJsonString(jsonString, options);
  }

  static equals(a: MangaPage | PlainMessage<MangaPage> | undefined, b: MangaPage | PlainMessage<MangaPage> | undefined): boolean {
    return proto3.util.equals(MangaPage, a, b);
  }
}

