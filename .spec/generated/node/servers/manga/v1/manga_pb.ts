// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file servers/manga/v1/manga.proto (package manga.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
 * Repo stuff
 *
 * @generated from message manga.v1.InstallRepoRequest
 */
export class InstallRepoRequest extends Message<InstallRepoRequest> {
  /**
   * @generated from field: string repoJsonUrl = 1;
   */
  repoJsonUrl = "";

  constructor(data?: PartialMessage<InstallRepoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.InstallRepoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repoJsonUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallRepoRequest {
    return new InstallRepoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallRepoRequest {
    return new InstallRepoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallRepoRequest {
    return new InstallRepoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InstallRepoRequest | PlainMessage<InstallRepoRequest> | undefined, b: InstallRepoRequest | PlainMessage<InstallRepoRequest> | undefined): boolean {
    return proto3.util.equals(InstallRepoRequest, a, b);
  }
}

/**
 * @generated from message manga.v1.InstallRepoResponse
 */
export class InstallRepoResponse extends Message<InstallRepoResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<InstallRepoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.InstallRepoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallRepoResponse {
    return new InstallRepoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallRepoResponse {
    return new InstallRepoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallRepoResponse {
    return new InstallRepoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InstallRepoResponse | PlainMessage<InstallRepoResponse> | undefined, b: InstallRepoResponse | PlainMessage<InstallRepoResponse> | undefined): boolean {
    return proto3.util.equals(InstallRepoResponse, a, b);
  }
}

/**
 * @generated from message manga.v1.RepoRequest
 */
export class RepoRequest extends Message<RepoRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<RepoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.RepoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepoRequest {
    return new RepoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepoRequest {
    return new RepoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepoRequest {
    return new RepoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RepoRequest | PlainMessage<RepoRequest> | undefined, b: RepoRequest | PlainMessage<RepoRequest> | undefined): boolean {
    return proto3.util.equals(RepoRequest, a, b);
  }
}

/**
 * @generated from message manga.v1.RepoResponse
 */
export class RepoResponse extends Message<RepoResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<RepoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.RepoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepoResponse {
    return new RepoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepoResponse {
    return new RepoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepoResponse {
    return new RepoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RepoResponse | PlainMessage<RepoResponse> | undefined, b: RepoResponse | PlainMessage<RepoResponse> | undefined): boolean {
    return proto3.util.equals(RepoResponse, a, b);
  }
}

/**
 * @generated from message manga.v1.ListRepoRequest
 */
export class ListRepoRequest extends Message<ListRepoRequest> {
  constructor(data?: PartialMessage<ListRepoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.ListRepoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRepoRequest {
    return new ListRepoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRepoRequest {
    return new ListRepoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRepoRequest {
    return new ListRepoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRepoRequest | PlainMessage<ListRepoRequest> | undefined, b: ListRepoRequest | PlainMessage<ListRepoRequest> | undefined): boolean {
    return proto3.util.equals(ListRepoRequest, a, b);
  }
}

/**
 * @generated from message manga.v1.ListRepoResponse
 */
export class ListRepoResponse extends Message<ListRepoResponse> {
  /**
   * @generated from field: repeated manga.v1.ExtensionRepo repos = 1;
   */
  repos: ExtensionRepo[] = [];

  constructor(data?: PartialMessage<ListRepoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.ListRepoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repos", kind: "message", T: ExtensionRepo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRepoResponse {
    return new ListRepoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRepoResponse {
    return new ListRepoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRepoResponse {
    return new ListRepoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRepoResponse | PlainMessage<ListRepoResponse> | undefined, b: ListRepoResponse | PlainMessage<ListRepoResponse> | undefined): boolean {
    return proto3.util.equals(ListRepoResponse, a, b);
  }
}

/**
 * @generated from message manga.v1.ExtensionRepo
 */
export class ExtensionRepo extends Message<ExtensionRepo> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string repoName = 2;
   */
  repoName = "";

  /**
   * @generated from field: string repoUrl = 3;
   */
  repoUrl = "";

  /**
   * @generated from field: string jsonRepoUrl = 4;
   */
  jsonRepoUrl = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  /**
   * @generated from field: int64 manifest_version = 6;
   */
  manifestVersion = protoInt64.zero;

  constructor(data?: PartialMessage<ExtensionRepo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.ExtensionRepo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repoName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "repoUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "jsonRepoUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "manifest_version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtensionRepo {
    return new ExtensionRepo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtensionRepo {
    return new ExtensionRepo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtensionRepo {
    return new ExtensionRepo().fromJsonString(jsonString, options);
  }

  static equals(a: ExtensionRepo | PlainMessage<ExtensionRepo> | undefined, b: ExtensionRepo | PlainMessage<ExtensionRepo> | undefined): boolean {
    return proto3.util.equals(ExtensionRepo, a, b);
  }
}

/**
 * ////////////////////////////////////////////////////////////////////////////////////////////////////////////
 * Extension stuff
 *
 * @generated from message manga.v1.ExtensionRequest
 */
export class ExtensionRequest extends Message<ExtensionRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<ExtensionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.ExtensionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtensionRequest {
    return new ExtensionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtensionRequest {
    return new ExtensionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtensionRequest {
    return new ExtensionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExtensionRequest | PlainMessage<ExtensionRequest> | undefined, b: ExtensionRequest | PlainMessage<ExtensionRequest> | undefined): boolean {
    return proto3.util.equals(ExtensionRequest, a, b);
  }
}

/**
 * @generated from message manga.v1.ExtensionResponse
 */
export class ExtensionResponse extends Message<ExtensionResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<ExtensionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.ExtensionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtensionResponse {
    return new ExtensionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtensionResponse {
    return new ExtensionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtensionResponse {
    return new ExtensionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExtensionResponse | PlainMessage<ExtensionResponse> | undefined, b: ExtensionResponse | PlainMessage<ExtensionResponse> | undefined): boolean {
    return proto3.util.equals(ExtensionResponse, a, b);
  }
}

/**
 * @generated from message manga.v1.ListExtensionRequest
 */
export class ListExtensionRequest extends Message<ListExtensionRequest> {
  constructor(data?: PartialMessage<ListExtensionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.ListExtensionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExtensionRequest {
    return new ListExtensionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExtensionRequest {
    return new ListExtensionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExtensionRequest {
    return new ListExtensionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListExtensionRequest | PlainMessage<ListExtensionRequest> | undefined, b: ListExtensionRequest | PlainMessage<ListExtensionRequest> | undefined): boolean {
    return proto3.util.equals(ListExtensionRequest, a, b);
  }
}

/**
 * @generated from message manga.v1.ListExtensionResponse
 */
export class ListExtensionResponse extends Message<ListExtensionResponse> {
  /**
   * @generated from field: repeated manga.v1.Extension extensions = 1;
   */
  extensions: Extension[] = [];

  constructor(data?: PartialMessage<ListExtensionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.ListExtensionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "extensions", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExtensionResponse {
    return new ListExtensionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExtensionResponse {
    return new ListExtensionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExtensionResponse {
    return new ListExtensionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListExtensionResponse | PlainMessage<ListExtensionResponse> | undefined, b: ListExtensionResponse | PlainMessage<ListExtensionResponse> | undefined): boolean {
    return proto3.util.equals(ListExtensionResponse, a, b);
  }
}

/**
 * @generated from message manga.v1.Extension
 */
export class Extension extends Message<Extension> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string extensionName = 2;
   */
  extensionName = "";

  /**
   * @generated from field: int64 manifest_version = 3;
   */
  manifestVersion = protoInt64.zero;

  /**
   * @generated from field: string version = 4;
   */
  version = "";

  /**
   * @generated from field: string media_type = 5;
   */
  mediaType = "";

  /**
   * @generated from field: string repoUrl = 6;
   */
  repoUrl = "";

  /**
   * @generated from field: string scriptUrl = 7;
   */
  scriptUrl = "";

  /**
   * @generated from field: string metaDataUrl = 8;
   */
  metaDataUrl = "";

  constructor(data?: PartialMessage<Extension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.Extension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "extensionName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "manifest_version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "media_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "repoUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "scriptUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "metaDataUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Extension {
    return new Extension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Extension {
    return new Extension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Extension {
    return new Extension().fromJsonString(jsonString, options);
  }

  static equals(a: Extension | PlainMessage<Extension> | undefined, b: Extension | PlainMessage<Extension> | undefined): boolean {
    return proto3.util.equals(Extension, a, b);
  }
}

/**
 * @generated from message manga.v1.SearchPluginRequest
 */
export class SearchPluginRequest extends Message<SearchPluginRequest> {
  /**
   * @generated from field: string searchQuery = 1;
   */
  searchQuery = "";

  /**
   * @generated from field: string pluginID = 2;
   */
  pluginID = "";

  constructor(data?: PartialMessage<SearchPluginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.SearchPluginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "searchQuery", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pluginID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchPluginRequest {
    return new SearchPluginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchPluginRequest {
    return new SearchPluginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchPluginRequest {
    return new SearchPluginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchPluginRequest | PlainMessage<SearchPluginRequest> | undefined, b: SearchPluginRequest | PlainMessage<SearchPluginRequest> | undefined): boolean {
    return proto3.util.equals(SearchPluginRequest, a, b);
  }
}

/**
 * @generated from message manga.v1.SearchPluginResponse
 */
export class SearchPluginResponse extends Message<SearchPluginResponse> {
  /**
   * @generated from field: string pong = 1;
   */
  pong = "";

  constructor(data?: PartialMessage<SearchPluginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.SearchPluginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pong", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchPluginResponse {
    return new SearchPluginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchPluginResponse {
    return new SearchPluginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchPluginResponse {
    return new SearchPluginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchPluginResponse | PlainMessage<SearchPluginResponse> | undefined, b: SearchPluginResponse | PlainMessage<SearchPluginResponse> | undefined): boolean {
    return proto3.util.equals(SearchPluginResponse, a, b);
  }
}

/**
 * @generated from message manga.v1.RefreshMangaResponse
 */
export class RefreshMangaResponse extends Message<RefreshMangaResponse> {
  constructor(data?: PartialMessage<RefreshMangaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.RefreshMangaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshMangaResponse {
    return new RefreshMangaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshMangaResponse {
    return new RefreshMangaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshMangaResponse {
    return new RefreshMangaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshMangaResponse | PlainMessage<RefreshMangaResponse> | undefined, b: RefreshMangaResponse | PlainMessage<RefreshMangaResponse> | undefined): boolean {
    return proto3.util.equals(RefreshMangaResponse, a, b);
  }
}

/**
 * @generated from message manga.v1.RefreshMangaRequest
 */
export class RefreshMangaRequest extends Message<RefreshMangaRequest> {
  constructor(data?: PartialMessage<RefreshMangaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.RefreshMangaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshMangaRequest {
    return new RefreshMangaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshMangaRequest {
    return new RefreshMangaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshMangaRequest {
    return new RefreshMangaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshMangaRequest | PlainMessage<RefreshMangaRequest> | undefined, b: RefreshMangaRequest | PlainMessage<RefreshMangaRequest> | undefined): boolean {
    return proto3.util.equals(RefreshMangaRequest, a, b);
  }
}

/**
 * todo add more metadata fields
 *
 * @generated from message manga.v1.MangaMetaData
 */
export class MangaMetaData extends Message<MangaMetaData> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * each name should be separated by a space
   *
   * @generated from field: string alternateTile = 2;
   */
  alternateTile = "";

  /**
   * @generated from field: repeated manga.v1.MangaChapter chapters = 4;
   */
  chapters: MangaChapter[] = [];

  constructor(data?: PartialMessage<MangaMetaData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.MangaMetaData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alternateTile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "chapters", kind: "message", T: MangaChapter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MangaMetaData {
    return new MangaMetaData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MangaMetaData {
    return new MangaMetaData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MangaMetaData {
    return new MangaMetaData().fromJsonString(jsonString, options);
  }

  static equals(a: MangaMetaData | PlainMessage<MangaMetaData> | undefined, b: MangaMetaData | PlainMessage<MangaMetaData> | undefined): boolean {
    return proto3.util.equals(MangaMetaData, a, b);
  }
}

/**
 * @generated from message manga.v1.MangaChapter
 */
export class MangaChapter extends Message<MangaChapter> {
  /**
   * @generated from field: string chapterNumber = 1;
   */
  chapterNumber = "";

  /**
   * @generated from field: string chapterName = 2;
   */
  chapterName = "";

  /**
   * @generated from field: string releaseDateInISO6801 = 3;
   */
  releaseDateInISO6801 = "";

  /**
   * @generated from field: repeated manga.v1.MangaPage pages = 4;
   */
  pages: MangaPage[] = [];

  constructor(data?: PartialMessage<MangaChapter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.MangaChapter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chapterNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chapterName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "releaseDateInISO6801", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pages", kind: "message", T: MangaPage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MangaChapter {
    return new MangaChapter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MangaChapter {
    return new MangaChapter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MangaChapter {
    return new MangaChapter().fromJsonString(jsonString, options);
  }

  static equals(a: MangaChapter | PlainMessage<MangaChapter> | undefined, b: MangaChapter | PlainMessage<MangaChapter> | undefined): boolean {
    return proto3.util.equals(MangaChapter, a, b);
  }
}

/**
 * @generated from message manga.v1.MangaPage
 */
export class MangaPage extends Message<MangaPage> {
  /**
   * @generated from field: int64 page = 1;
   */
  page = protoInt64.zero;

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<MangaPage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "manga.v1.MangaPage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MangaPage {
    return new MangaPage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MangaPage {
    return new MangaPage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MangaPage {
    return new MangaPage().fromJsonString(jsonString, options);
  }

  static equals(a: MangaPage | PlainMessage<MangaPage> | undefined, b: MangaPage | PlainMessage<MangaPage> | undefined): boolean {
    return proto3.util.equals(MangaPage, a, b);
  }
}

