// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: manga/v1/manga.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "hydra/generated/manga/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MangaServiceName is the fully-qualified name of the MangaService service.
	MangaServiceName = "manga.v1.MangaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MangaServiceNewJobProcedure is the fully-qualified name of the MangaService's NewJob RPC.
	MangaServiceNewJobProcedure = "/manga.v1.MangaService/NewJob"
	// MangaServiceJobStatusProcedure is the fully-qualified name of the MangaService's JobStatus RPC.
	MangaServiceJobStatusProcedure = "/manga.v1.MangaService/JobStatus"
	// MangaServiceCancelJobProcedure is the fully-qualified name of the MangaService's CancelJob RPC.
	MangaServiceCancelJobProcedure = "/manga.v1.MangaService/CancelJob"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mangaServiceServiceDescriptor         = v1.File_manga_v1_manga_proto.Services().ByName("MangaService")
	mangaServiceNewJobMethodDescriptor    = mangaServiceServiceDescriptor.Methods().ByName("NewJob")
	mangaServiceJobStatusMethodDescriptor = mangaServiceServiceDescriptor.Methods().ByName("JobStatus")
	mangaServiceCancelJobMethodDescriptor = mangaServiceServiceDescriptor.Methods().ByName("CancelJob")
)

// MangaServiceClient is a client for the manga.v1.MangaService service.
type MangaServiceClient interface {
	NewJob(context.Context, *connect.Request[v1.NewJobRequest]) (*connect.Response[v1.NewJobResponse], error)
	JobStatus(context.Context, *connect.Request[v1.JobStatusRequest]) (*connect.Response[v1.JobStatusResponse], error)
	CancelJob(context.Context, *connect.Request[v1.CancelJobRequest]) (*connect.Response[v1.CancelJobResponse], error)
}

// NewMangaServiceClient constructs a client for the manga.v1.MangaService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMangaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MangaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mangaServiceClient{
		newJob: connect.NewClient[v1.NewJobRequest, v1.NewJobResponse](
			httpClient,
			baseURL+MangaServiceNewJobProcedure,
			connect.WithSchema(mangaServiceNewJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		jobStatus: connect.NewClient[v1.JobStatusRequest, v1.JobStatusResponse](
			httpClient,
			baseURL+MangaServiceJobStatusProcedure,
			connect.WithSchema(mangaServiceJobStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelJob: connect.NewClient[v1.CancelJobRequest, v1.CancelJobResponse](
			httpClient,
			baseURL+MangaServiceCancelJobProcedure,
			connect.WithSchema(mangaServiceCancelJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mangaServiceClient implements MangaServiceClient.
type mangaServiceClient struct {
	newJob    *connect.Client[v1.NewJobRequest, v1.NewJobResponse]
	jobStatus *connect.Client[v1.JobStatusRequest, v1.JobStatusResponse]
	cancelJob *connect.Client[v1.CancelJobRequest, v1.CancelJobResponse]
}

// NewJob calls manga.v1.MangaService.NewJob.
func (c *mangaServiceClient) NewJob(ctx context.Context, req *connect.Request[v1.NewJobRequest]) (*connect.Response[v1.NewJobResponse], error) {
	return c.newJob.CallUnary(ctx, req)
}

// JobStatus calls manga.v1.MangaService.JobStatus.
func (c *mangaServiceClient) JobStatus(ctx context.Context, req *connect.Request[v1.JobStatusRequest]) (*connect.Response[v1.JobStatusResponse], error) {
	return c.jobStatus.CallUnary(ctx, req)
}

// CancelJob calls manga.v1.MangaService.CancelJob.
func (c *mangaServiceClient) CancelJob(ctx context.Context, req *connect.Request[v1.CancelJobRequest]) (*connect.Response[v1.CancelJobResponse], error) {
	return c.cancelJob.CallUnary(ctx, req)
}

// MangaServiceHandler is an implementation of the manga.v1.MangaService service.
type MangaServiceHandler interface {
	NewJob(context.Context, *connect.Request[v1.NewJobRequest]) (*connect.Response[v1.NewJobResponse], error)
	JobStatus(context.Context, *connect.Request[v1.JobStatusRequest]) (*connect.Response[v1.JobStatusResponse], error)
	CancelJob(context.Context, *connect.Request[v1.CancelJobRequest]) (*connect.Response[v1.CancelJobResponse], error)
}

// NewMangaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMangaServiceHandler(svc MangaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mangaServiceNewJobHandler := connect.NewUnaryHandler(
		MangaServiceNewJobProcedure,
		svc.NewJob,
		connect.WithSchema(mangaServiceNewJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mangaServiceJobStatusHandler := connect.NewUnaryHandler(
		MangaServiceJobStatusProcedure,
		svc.JobStatus,
		connect.WithSchema(mangaServiceJobStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mangaServiceCancelJobHandler := connect.NewUnaryHandler(
		MangaServiceCancelJobProcedure,
		svc.CancelJob,
		connect.WithSchema(mangaServiceCancelJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/manga.v1.MangaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MangaServiceNewJobProcedure:
			mangaServiceNewJobHandler.ServeHTTP(w, r)
		case MangaServiceJobStatusProcedure:
			mangaServiceJobStatusHandler.ServeHTTP(w, r)
		case MangaServiceCancelJobProcedure:
			mangaServiceCancelJobHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMangaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMangaServiceHandler struct{}

func (UnimplementedMangaServiceHandler) NewJob(context.Context, *connect.Request[v1.NewJobRequest]) (*connect.Response[v1.NewJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manga.v1.MangaService.NewJob is not implemented"))
}

func (UnimplementedMangaServiceHandler) JobStatus(context.Context, *connect.Request[v1.JobStatusRequest]) (*connect.Response[v1.JobStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manga.v1.MangaService.JobStatus is not implemented"))
}

func (UnimplementedMangaServiceHandler) CancelJob(context.Context, *connect.Request[v1.CancelJobRequest]) (*connect.Response[v1.CancelJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manga.v1.MangaService.CancelJob is not implemented"))
}
