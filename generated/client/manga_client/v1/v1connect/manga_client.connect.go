// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: client/manga_client/v1/manga_client.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "hydra/generated/client/manga_client/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MangaClientServiceName is the fully-qualified name of the MangaClientService service.
	MangaClientServiceName = "manga_client.v1.MangaClientService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MangaClientServiceNewJobProcedure is the fully-qualified name of the MangaClientService's NewJob
	// RPC.
	MangaClientServiceNewJobProcedure = "/manga_client.v1.MangaClientService/NewJob"
	// MangaClientServiceJobStatusProcedure is the fully-qualified name of the MangaClientService's
	// JobStatus RPC.
	MangaClientServiceJobStatusProcedure = "/manga_client.v1.MangaClientService/JobStatus"
	// MangaClientServiceCancelJobProcedure is the fully-qualified name of the MangaClientService's
	// CancelJob RPC.
	MangaClientServiceCancelJobProcedure = "/manga_client.v1.MangaClientService/CancelJob"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mangaClientServiceServiceDescriptor         = v1.File_client_manga_client_v1_manga_client_proto.Services().ByName("MangaClientService")
	mangaClientServiceNewJobMethodDescriptor    = mangaClientServiceServiceDescriptor.Methods().ByName("NewJob")
	mangaClientServiceJobStatusMethodDescriptor = mangaClientServiceServiceDescriptor.Methods().ByName("JobStatus")
	mangaClientServiceCancelJobMethodDescriptor = mangaClientServiceServiceDescriptor.Methods().ByName("CancelJob")
)

// MangaClientServiceClient is a client for the manga_client.v1.MangaClientService service.
type MangaClientServiceClient interface {
	NewJob(context.Context, *connect.Request[v1.NewJobRequest]) (*connect.Response[v1.NewJobResponse], error)
	JobStatus(context.Context, *connect.Request[v1.JobStatusRequest]) (*connect.Response[v1.JobStatusResponse], error)
	CancelJob(context.Context, *connect.Request[v1.CancelJobRequest]) (*connect.Response[v1.CancelJobResponse], error)
}

// NewMangaClientServiceClient constructs a client for the manga_client.v1.MangaClientService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMangaClientServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MangaClientServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mangaClientServiceClient{
		newJob: connect.NewClient[v1.NewJobRequest, v1.NewJobResponse](
			httpClient,
			baseURL+MangaClientServiceNewJobProcedure,
			connect.WithSchema(mangaClientServiceNewJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		jobStatus: connect.NewClient[v1.JobStatusRequest, v1.JobStatusResponse](
			httpClient,
			baseURL+MangaClientServiceJobStatusProcedure,
			connect.WithSchema(mangaClientServiceJobStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelJob: connect.NewClient[v1.CancelJobRequest, v1.CancelJobResponse](
			httpClient,
			baseURL+MangaClientServiceCancelJobProcedure,
			connect.WithSchema(mangaClientServiceCancelJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mangaClientServiceClient implements MangaClientServiceClient.
type mangaClientServiceClient struct {
	newJob    *connect.Client[v1.NewJobRequest, v1.NewJobResponse]
	jobStatus *connect.Client[v1.JobStatusRequest, v1.JobStatusResponse]
	cancelJob *connect.Client[v1.CancelJobRequest, v1.CancelJobResponse]
}

// NewJob calls manga_client.v1.MangaClientService.NewJob.
func (c *mangaClientServiceClient) NewJob(ctx context.Context, req *connect.Request[v1.NewJobRequest]) (*connect.Response[v1.NewJobResponse], error) {
	return c.newJob.CallUnary(ctx, req)
}

// JobStatus calls manga_client.v1.MangaClientService.JobStatus.
func (c *mangaClientServiceClient) JobStatus(ctx context.Context, req *connect.Request[v1.JobStatusRequest]) (*connect.Response[v1.JobStatusResponse], error) {
	return c.jobStatus.CallUnary(ctx, req)
}

// CancelJob calls manga_client.v1.MangaClientService.CancelJob.
func (c *mangaClientServiceClient) CancelJob(ctx context.Context, req *connect.Request[v1.CancelJobRequest]) (*connect.Response[v1.CancelJobResponse], error) {
	return c.cancelJob.CallUnary(ctx, req)
}

// MangaClientServiceHandler is an implementation of the manga_client.v1.MangaClientService service.
type MangaClientServiceHandler interface {
	NewJob(context.Context, *connect.Request[v1.NewJobRequest]) (*connect.Response[v1.NewJobResponse], error)
	JobStatus(context.Context, *connect.Request[v1.JobStatusRequest]) (*connect.Response[v1.JobStatusResponse], error)
	CancelJob(context.Context, *connect.Request[v1.CancelJobRequest]) (*connect.Response[v1.CancelJobResponse], error)
}

// NewMangaClientServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMangaClientServiceHandler(svc MangaClientServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mangaClientServiceNewJobHandler := connect.NewUnaryHandler(
		MangaClientServiceNewJobProcedure,
		svc.NewJob,
		connect.WithSchema(mangaClientServiceNewJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mangaClientServiceJobStatusHandler := connect.NewUnaryHandler(
		MangaClientServiceJobStatusProcedure,
		svc.JobStatus,
		connect.WithSchema(mangaClientServiceJobStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mangaClientServiceCancelJobHandler := connect.NewUnaryHandler(
		MangaClientServiceCancelJobProcedure,
		svc.CancelJob,
		connect.WithSchema(mangaClientServiceCancelJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/manga_client.v1.MangaClientService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MangaClientServiceNewJobProcedure:
			mangaClientServiceNewJobHandler.ServeHTTP(w, r)
		case MangaClientServiceJobStatusProcedure:
			mangaClientServiceJobStatusHandler.ServeHTTP(w, r)
		case MangaClientServiceCancelJobProcedure:
			mangaClientServiceCancelJobHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMangaClientServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMangaClientServiceHandler struct{}

func (UnimplementedMangaClientServiceHandler) NewJob(context.Context, *connect.Request[v1.NewJobRequest]) (*connect.Response[v1.NewJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manga_client.v1.MangaClientService.NewJob is not implemented"))
}

func (UnimplementedMangaClientServiceHandler) JobStatus(context.Context, *connect.Request[v1.JobStatusRequest]) (*connect.Response[v1.JobStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manga_client.v1.MangaClientService.JobStatus is not implemented"))
}

func (UnimplementedMangaClientServiceHandler) CancelJob(context.Context, *connect.Request[v1.CancelJobRequest]) (*connect.Response[v1.CancelJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manga_client.v1.MangaClientService.CancelJob is not implemented"))
}
